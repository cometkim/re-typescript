type config <ocaml from="Config"> = abstract
type position <ocaml from="Parse_info" t="t"> = abstract

type parse_language = [
  | Reason
  | Ocaml
] <ocaml repr="classic">
type parse_request = {
  language: parse_language;
  content: string;
  config: config;
  file_path: string;
}

type parse_result = [
  | Error of (parse_error_kind * string)
  | Ok of (string * string)
] <ocaml repr="classic">

type parse_error_kind = [
  | Parser_unexpected
  | Parser_error
  | Parser_parameter_error
  | Parser_unsupported of position
  | Optimizer_error
  | Reason_error
  | Syntax_error
  | Base_parser_error
  | Base_lexer_error
  | Js_unknown
] <ocaml repr="classic">

type example_meta = {
  name: string;
  description: string;
  entry: string;
}

type example_tree = [
  | Folder of (string * example_tree list)
  | File of string
] <ocaml repr="classic">

type example = {
  path: string;
  meta: example_meta;
  files: example_tree list;
}
type example_list = example list

type worker_request = [
  | Parse of parse_request
  | ExampleList
] <ocaml repr="classic">

type worker_response = [
  | Res_Parse of parse_result
  | Res_ExampleList of example_list
] <ocaml repr="classic">