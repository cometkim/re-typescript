type readonlyTextRange = {
    pos: int ;  
    end_ <json name="end">: int ;
}

type node_Generic = {
    inherit readonlyTextRange;

    kind: int ;
    kindName: string ;
    flags: int ;
    ?modifiers: node list option ;
    ?decorators: node list option ;
    ?resolvedSymbol: symbol option ;
    ?resolvedType: type_ option ;
}

type node_SourceFile = {
    inherit node_Generic ;

    statements: node list;
    text: string ;
    languageVersion: int;
    fileName: string ;
    languageVariant: int ;
    isDeclarationFile: bool ;
    nodeCount: int ;
    identifierCount: int ;
}

type node_NamedDeclaration = {
    inherit node_Generic;

    ?name: node option ;
}

type node_TypeAliasDeclaration = {
    inherit node_NamedDeclaration;

    name: node ;
    ?typeParameters: node list option ;
    type_ <json name="type">: node ;
}

type node_TypeParameter = {
    inherit node_NamedDeclaration;

    name: node ;
    ?constraint_ <json name="constraint">: node option;
    ?default: node option;
    ?expression: node option;
}

type node_InterfaceDeclaration = {
    inherit node_NamedDeclaration;

    name: node ;
    ?typeParameters: node list option ;
    (* ?heritageClauses:  node list option ; *)
    members: node list ;
}

type node_HeritageClause = {
    inherit node_Generic;

    token: int ;
    types: node list option ;
}

type node_TypeElement = {
    inherit node_Generic;

    ?questionToken: node option ;
}

type node_Identifier = {
    inherit node_Generic;

    escapedText: string;
    ?originalKeywordKind: int option;
}

type node_VariableDeclarationList = {
    inherit node_Generic;

    declarations: node list ;
}

type node_VariableDeclaration = {
    inherit node_NamedDeclaration;

    name: node ;
    ?exclamationToken: node option ;
    ?type_ <json name="type">: node option ;
    ?initializer_ <json name="initializer">: node option ;
}

type node_TypeLiteral = {
    inherit node_Generic;

    members: node list ;
}

type node_LiteralType = {
    inherit node_Generic;

    literal: node;
}

type node_PropertySignature = {
    inherit node_Generic;

    name: node ;
    ?questionToken: node option ;
    ?type_ <json name="type">: node option ;
    ?initializer_ <json name="initializer">: node option;
}

type node_TypeOperator = {
    inherit node_Generic;

    operator: int ;
    type_ <json name="type">: node ;
}

type node_NodeWithTypeArguments = {
    inherit node_Generic;

    ?typeArguments: node list option ;
}

type node_TypeReference = {
    inherit node_NodeWithTypeArguments;

    typeName: node ;
}

type node_QualifiedName = {
    inherit node_Generic;

    left: node ;
    right: node ;
}

type node_EnumDeclaration = {
    inherit node_NamedDeclaration;

    name: node;
    members: node list;
}

type node_EnumMember = {
    inherit node_NamedDeclaration;

    name: node;
    ?initializer_ <json name="initializer">: node option ;
}

type node_UnionType = {
    inherit node_Generic;

    types: node list;
}

type node_TupleType = {
    inherit node_Generic;

    elementTypes: node list;
}

type node_NamedTupleMember = {
    inherit node_Generic;

    ?dotDotDotToken: node option;
    ?questionToken: node option;
    name: node;
    type_ <json name="type">: node;
}

type node_RestType = {
    inherit node_Generic;

    type_ <json name="type">: node;
}

type node_OptionalType = {
    inherit node_Generic;

    type_ <json name="type">: node;
}


type node_SignatureDeclarationBase = {
    inherit node_NamedDeclaration;

    ?name: node option ;
    ?typeParameters: node list option ;
    parameters: node list ;
    ?type_ <json name="type">: node option ;
    ?typeArguments: node list option ;
}

type node_FunctionType = {
    inherit node_SignatureDeclarationBase;
}

type node_FunctionLikeDeclarationBase = {
    inherit node_SignatureDeclarationBase;

    ?asteriskToken: node option ;
    ?questionToken: node option ;
    ?exclamationToken: node option ;
    ?body: node option ;

}

type node_ArrayType = {
    inherit node_Generic;

    elementType: node;
}

type node_FunctionDeclaration = {
    inherit node_FunctionLikeDeclarationBase;

    ?name: node option ;
    ?body: node option ;
}

type node_MethodSignature = {
    inherit node_SignatureDeclarationBase;

    ?name: node option ;
}

type node_IndexSignature = {
    inherit node_SignatureDeclarationBase;

    ?name: node option ;
}

type node_CallSignature = {
    inherit node_SignatureDeclarationBase;
}

type node_Parameter = {
    inherit node_NamedDeclaration;

    ?dotDotDotToken: node option ;
    name: node ;
    ?questionToken: node option ;
    ?type_ <json name="type">: node option ;
    ?initializer_ <json name="initializer">: node option ;
}

type node_BindingElement = {
    inherit node_NamedDeclaration;

    ?propertyName: node option ;
    ?dotDotDotToken: node option ;
    name: node ;
    ?initializer_ <json name="initializer">: node option ;
}

type node_PropertyDeclaration = {
    inherit node_NamedDeclaration;

    name: node ;
    ?questionToken: node option ;
    ?exclamationToken: node option ;
    ?type_ <json name="type">: node option ;
    ?initializer_ <json name="initializer">: node option ;
}

type node_IntersectionType = {
    inherit node_Generic;

    types: node list;
}

type node = [
    | SourceFile of node_SourceFile
    | TypeAliasDeclaration of node_TypeAliasDeclaration
    | TypeParameter of node_TypeParameter
    | InterfaceDeclaration of node_InterfaceDeclaration
    | HeritageClause of node_HeritageClause
    | Identifier of node_Identifier
    | PrivateIdentifier of node_Generic
    | StringLiteral of node_Generic
    | NumericLiteral of node_Generic
    | Unknown of node_Generic
    | EndOfFileToken of node_Generic
    | SingleLineCommentTrivia of node_Generic
    | MultiLineCommentTrivia of node_Generic
    | NewLineTrivia of node_Generic
    | WhitespaceTrivia of node_Generic
    | ShebangTrivia of node_Generic
    | ConflictMarkerTrivia of node_Generic
    | BigIntLiteral of node_Generic
    | JsxText of node_Generic
    | JsxTextAllWhiteSpaces of node_Generic
    | RegularExpressionLiteral of node_Generic
    | NoSubstitutionTemplateLiteral of node_Generic
    | TemplateHead of node_Generic
    | TemplateMiddle of node_Generic
    | TemplateTail of node_Generic
    | OpenBraceToken of node_Generic
    | CloseBraceToken of node_Generic
    | OpenParenToken of node_Generic
    | CloseParenToken of node_Generic
    | OpenBracketToken of node_Generic
    | CloseBracketToken of node_Generic
    | DotToken of node_Generic
    | DotDotDotToken of node_Generic
    | SemicolonToken of node_Generic
    | CommaToken of node_Generic
    | QuestionDotToken of node_Generic
    | LessThanToken of node_Generic
    | LessThanSlashToken of node_Generic
    | GreaterThanToken of node_Generic
    | LessThanEqualsToken of node_Generic
    | GreaterThanEqualsToken of node_Generic
    | EqualsEqualsToken of node_Generic
    | ExclamationEqualsToken of node_Generic
    | EqualsEqualsEqualsToken of node_Generic
    | ExclamationEqualsEqualsToken of node_Generic
    | EqualsGreaterThanToken of node_Generic
    | PlusToken of node_Generic
    | MinusToken of node_Generic
    | AsteriskToken of node_Generic
    | AsteriskAsteriskToken of node_Generic
    | SlashToken of node_Generic
    | PercentToken of node_Generic
    | PlusPlusToken of node_Generic
    | MinusMinusToken of node_Generic
    | LessThanLessThanToken of node_Generic
    | GreaterThanGreaterThanToken of node_Generic
    | GreaterThanGreaterThanGreaterThanToken of node_Generic
    | AmpersandToken of node_Generic
    | BarToken of node_Generic
    | CaretToken of node_Generic
    | ExclamationToken of node_Generic
    | TildeToken of node_Generic
    | AmpersandAmpersandToken of node_Generic
    | BarBarToken of node_Generic
    | QuestionToken of node_Generic
    | ColonToken of node_Generic
    | AtToken of node_Generic
    | QuestionQuestionToken of node_Generic
    | BacktickToken of node_Generic
    | EqualsToken of node_Generic
    | PlusEqualsToken of node_Generic
    | MinusEqualsToken of node_Generic
    | AsteriskEqualsToken of node_Generic
    | AsteriskAsteriskEqualsToken of node_Generic
    | SlashEqualsToken of node_Generic
    | PercentEqualsToken of node_Generic
    | LessThanLessThanEqualsToken of node_Generic
    | GreaterThanGreaterThanEqualsToken of node_Generic
    | GreaterThanGreaterThanGreaterThanEqualsToken of node_Generic
    | AmpersandEqualsToken of node_Generic
    | BarEqualsToken of node_Generic
    | BarBarEqualsToken of node_Generic
    | AmpersandAmpersandEqualsToken of node_Generic
    | QuestionQuestionEqualsToken of node_Generic
    | CaretEqualsToken of node_Generic
    | BreakKeyword of node_Generic
    | CaseKeyword of node_Generic
    | CatchKeyword of node_Generic
    | ClassKeyword of node_Generic
    | ConstKeyword of node_Generic
    | ContinueKeyword of node_Generic
    | DebuggerKeyword of node_Generic
    | DefaultKeyword of node_Generic
    | DeleteKeyword of node_Generic
    | DoKeyword of node_Generic
    | ElseKeyword of node_Generic
    | EnumKeyword of node_Generic
    | ExportKeyword of node_Generic
    | ExtendsKeyword of node_Generic
    | FalseKeyword of node_Generic
    | FinallyKeyword of node_Generic
    | ForKeyword of node_Generic
    | FunctionKeyword of node_Generic
    | IfKeyword of node_Generic
    | ImportKeyword of node_Generic
    | InKeyword of node_Generic
    | InstanceOfKeyword of node_Generic
    | NewKeyword of node_Generic
    | NullKeyword of node_Generic
    | ReturnKeyword of node_Generic
    | SuperKeyword of node_Generic
    | SwitchKeyword of node_Generic
    | ThisKeyword of node_Generic
    | ThrowKeyword of node_Generic
    | TrueKeyword of node_Generic
    | TryKeyword of node_Generic
    | TypeOfKeyword of node_Generic
    | VarKeyword of node_Generic
    | VoidKeyword of node_Generic
    | WhileKeyword of node_Generic
    | WithKeyword of node_Generic
    | ImplementsKeyword of node_Generic
    | InterfaceKeyword of node_Generic
    | LetKeyword of node_Generic
    | PackageKeyword of node_Generic
    | PrivateKeyword of node_Generic
    | ProtectedKeyword of node_Generic
    | PublicKeyword of node_Generic
    | StaticKeyword of node_Generic
    | YieldKeyword of node_Generic
    | AbstractKeyword of node_Generic
    | AsKeyword of node_Generic
    | AssertsKeyword of node_Generic
    | AnyKeyword of node_Generic
    | AsyncKeyword of node_Generic
    | AwaitKeyword of node_Generic
    | BooleanKeyword of node_Generic
    | ConstructorKeyword of node_Generic
    | DeclareKeyword of node_Generic
    | GetKeyword of node_Generic
    | InferKeyword of node_Generic
    | IsKeyword of node_Generic
    | KeyOfKeyword of node_Generic
    | ModuleKeyword of node_Generic
    | NamespaceKeyword of node_Generic
    | NeverKeyword of node_Generic
    | ReadonlyKeyword of node_Generic
    | RequireKeyword of node_Generic
    | NumberKeyword of node_Generic
    | ObjectKeyword of node_Generic
    | SetKeyword of node_Generic
    | StringKeyword of node_Generic
    | SymbolKeyword of node_Generic
    | TypeKeyword of node_Generic
    | UndefinedKeyword of node_Generic
    | UniqueKeyword of node_Generic
    | UnknownKeyword of node_Generic
    | FromKeyword of node_Generic
    | GlobalKeyword of node_Generic
    | BigIntKeyword of node_Generic
    | OfKeyword of node_Generic
    | QualifiedName of node_QualifiedName
    | ComputedPropertyName of node_Generic
    | Parameter of node_Parameter
    | Decorator of node_Generic
    | PropertySignature of node_PropertySignature
    | PropertyDeclaration of node_PropertyDeclaration
    | MethodSignature of node_MethodSignature
    | MethodDeclaration of node_Generic
    | Constructor of node_Generic
    | GetAccessor of node_Generic
    | SetAccessor of node_Generic
    | CallSignature of node_CallSignature
    | ConstructSignature of node_Generic
    | IndexSignature of node_IndexSignature
    | TypePredicate of node_Generic
    | TypeReference of node_TypeReference
    | FunctionType of node_FunctionType
    | ConstructorType of node_Generic
    | TypeQuery of node_Generic
    | TypeLiteral of node_TypeLiteral
    | ArrayType of node_ArrayType
    | TupleType of node_TupleType
    | OptionalType of node_OptionalType
    | RestType of node_RestType
    | UnionType of node_UnionType
    | IntersectionType of node_IntersectionType
    | ConditionalType of node_Generic
    | InferType of node_Generic
    | ParenthesizedType of node_Generic
    | ThisType of node_Generic
    | TypeOperator of node_TypeOperator
    | IndexedAccessType of node_Generic
    | MappedType of node_Generic
    | LiteralType of node_LiteralType
    | NamedTupleMember of node_Generic
    | ImportType of node_Generic
    | ObjectBindingPattern of node_Generic
    | ArrayBindingPattern of node_Generic
    | BindingElement of node_BindingElement
    | ArrayLiteralExpression of node_Generic
    | ObjectLiteralExpression of node_Generic
    | PropertyAccessExpression of node_Generic
    | ElementAccessExpression of node_Generic
    | CallExpression of node_Generic
    | NewExpression of node_Generic
    | TaggedTemplateExpression of node_Generic
    | TypeAssertionExpression of node_Generic
    | ParenthesizedExpression of node_Generic
    | FunctionExpression of node_Generic
    | ArrowFunction of node_Generic
    | DeleteExpression of node_Generic
    | TypeOfExpression of node_Generic
    | VoidExpression of node_Generic
    | AwaitExpression of node_Generic
    | PrefixUnaryExpression of node_Generic
    | PostfixUnaryExpression of node_Generic
    | BinaryExpression of node_Generic
    | ConditionalExpression of node_Generic
    | TemplateExpression of node_Generic
    | YieldExpression of node_Generic
    | SpreadElement of node_Generic
    | ClassExpression of node_Generic
    | OmittedExpression of node_Generic
    | ExpressionWithTypeArguments of node_Generic
    | AsExpression of node_Generic
    | NonNullExpression of node_Generic
    | MetaProperty of node_Generic
    | SyntheticExpression of node_Generic
    | TemplateSpan of node_Generic
    | SemicolonClassElement of node_Generic
    | Block of node_Generic
    | EmptyStatement of node_Generic
    | VariableStatement of node_Generic
    | ExpressionStatement of node_Generic
    | IfStatement of node_Generic
    | DoStatement of node_Generic
    | WhileStatement of node_Generic
    | ForStatement of node_Generic
    | ForInStatement of node_Generic
    | ForOfStatement of node_Generic
    | ContinueStatement of node_Generic
    | BreakStatement of node_Generic
    | ReturnStatement of node_Generic
    | WithStatement of node_Generic
    | SwitchStatement of node_Generic
    | LabeledStatement of node_Generic
    | ThrowStatement of node_Generic
    | TryStatement of node_Generic
    | DebuggerStatement of node_Generic
    | VariableDeclaration of node_VariableDeclaration
    | VariableDeclarationList of node_VariableDeclarationList
    | FunctionDeclaration of node_FunctionDeclaration
    | ClassDeclaration of node_Generic
    | EnumDeclaration of node_EnumDeclaration
    | ModuleDeclaration of node_Generic
    | ModuleBlock of node_Generic
    | CaseBlock of node_Generic
    | NamespaceExportDeclaration of node_Generic
    | ImportEqualsDeclaration of node_Generic
    | ImportDeclaration of node_Generic
    | ImportClause of node_Generic
    | NamespaceImport of node_Generic
    | NamedImports of node_Generic
    | ImportSpecifier of node_Generic
    | ExportAssignment of node_Generic
    | ExportDeclaration of node_Generic
    | NamedExports of node_Generic
    | NamespaceExport of node_Generic
    | ExportSpecifier of node_Generic
    | MissingDeclaration of node_Generic
    | ExternalModuleReference of node_Generic
    | JsxElement of node_Generic
    | JsxSelfClosingElement of node_Generic
    | JsxOpeningElement of node_Generic
    | JsxClosingElement of node_Generic
    | JsxFragment of node_Generic
    | JsxOpeningFragment of node_Generic
    | JsxClosingFragment of node_Generic
    | JsxAttribute of node_Generic
    | JsxAttributes of node_Generic
    | JsxSpreadAttribute of node_Generic
    | JsxExpression of node_Generic
    | CaseClause of node_Generic
    | DefaultClause of node_Generic
    | CatchClause of node_Generic
    | PropertyAssignment of node_Generic
    | ShorthandPropertyAssignment of node_Generic
    | SpreadAssignment of node_Generic
    | EnumMember of node_EnumMember
    | UnparsedPrologue of node_Generic
    | UnparsedPrepend of node_Generic
    | UnparsedText of node_Generic
    | UnparsedInternalText of node_Generic
    | UnparsedSyntheticReference of node_Generic
    | Bundle of node_Generic
    | UnparsedSource of node_Generic
    | InputFiles of node_Generic
    | JSDocTypeExpression of node_Generic
    | JSDocAllType of node_Generic
    | JSDocUnknownType of node_Generic
    | JSDocNullableType of node_Generic
    | JSDocNonNullableType of node_Generic
    | JSDocOptionalType of node_Generic
    | JSDocFunctionType of node_Generic
    | JSDocVariadicType of node_Generic
    | JSDocNamepathType of node_Generic
    | JSDocComment of node_Generic
    | JSDocTypeLiteral of node_Generic
    | JSDocSignature of node_Generic
    | JSDocTag of node_Generic
    | JSDocAugmentsTag of node_Generic
    | JSDocImplementsTag of node_Generic
    | JSDocAuthorTag of node_Generic
    | JSDocDeprecatedTag of node_Generic
    | JSDocClassTag of node_Generic
    | JSDocPublicTag of node_Generic
    | JSDocPrivateTag of node_Generic
    | JSDocProtectedTag of node_Generic
    | JSDocReadonlyTag of node_Generic
    | JSDocCallbackTag of node_Generic
    | JSDocEnumTag of node_Generic
    | JSDocParameterTag of node_Generic
    | JSDocReturnTag of node_Generic
    | JSDocThisTag of node_Generic
    | JSDocTypeTag of node_Generic
    | JSDocTemplateTag of node_Generic
    | JSDocTypedefTag of node_Generic
    | JSDocPropertyTag of node_Generic
    | SyntaxList of node_Generic
    | NotEmittedStatement of node_Generic
    | PartiallyEmittedExpression of node_Generic
    | CommaListExpression of node_Generic
    | MergeDeclarationMarker of node_Generic
    | EndOfDeclarationMarker of node_Generic
    | SyntheticReferenceExpression of node_Generic
    | Count of node_Generic
] <json adapter.ocaml="Typescript_json_adapters.KindName">

type symbol  = {
    flags: int ;
    ?id: int option ;
    (* ?resolvedType: type_ option ; *)
    fullyQualifiedName: string ;
    name: string ;
}

type type_Generic = {
    flags: int ;
    ?id: int option ;
    ?pattern: node option ;
    ?aliasTypeArguments: type_ list option;
    kindName: string ;    
}

type type_ObjectType = {
    inherit type_Generic;

    objectFlags: int ;
}

type type_TypeReference = {
    inherit type_Generic;

    ?target: type_ option ;
}

type type_UnionOrIntersectionType = {
    inherit type_Generic ;

    types: type_ list;
}

type type_UnionType = {
    inherit type_UnionOrIntersectionType;
}

type type_IntersectionType = {
    inherit type_UnionOrIntersectionType;
}

type type_LiteralType = {
    inherit type_Generic;
}

type type_StringLiteralType = {
    inherit type_LiteralType;

    value: string ;
}
type type_NumberLiteralType = {
    inherit type_LiteralType;

    value: float ;
}

type type_TupleType = {
    inherit type_Generic;

    minLength: int ;
    fixedLength: int ;
    hasRestElement: bool ;
    readonly: bool ;
    elementFlags: int list ;
    combinedFlags: int ;
    ?labeledElementDeclarations: node list option;
}

type type_InterfaceType = {
    inherit type_ObjectType;

    ?typeParameters: type_ list option ;
    ?outerTypeParameters: type_ list option ;
    ?localTypeParameters: type_ list option ;
    ?thisType: type_ option ;
}

type type_AnonymousType = {
    inherit type_ObjectType;
    
    ?target: type_ option;
}

type type_TypeParameter = {
    inherit type_Generic;

    (*?constraint_ <json name="constraint">: type_ option;*)
}

type conditionalRoot = {
    node: node ;
    checkType:  type_ ;
    extendsType: type_ ;
    trueType: type_ ;
    falseType: type_ ;
    isDistributive: bool ;
    ?inferTypeParameters: type_ list option ;
    ?outerTypeParameters: type_ list option ;
    ?instantiations: (string * type_) <json repr="object"> option ;
    ?aliasSymbol: symbol option ;
    ?aliasTypeArguments: type_ list option ;
}

type type_conditionalType = {
    root: conditionalRoot;
    checkType:  type_ ;
    extendsType: type_ ;
    resolvedTrueType: type_ ;
    resolvedFalseType: type_ ;
}

type type_Unidentified = {
    inherit type_Generic;

    ?nodeKind: string option ;
}

type type_ = [
    | ObjectKeyword of type_Generic
    | Void of type_Generic
    | Any of type_Generic
    | Array of type_Generic
    | Boolean of type_Generic
    | String of type_Generic
    | Number of type_Generic
    | Literal of type_Generic
    | BooleanLiteral of type_Generic
    | Union of type_UnionType
    | EnumLiteral of type_StringLiteralType
    | NumberLiteral of type_NumberLiteralType
    | StringLiteral of type_StringLiteralType
    | Class of type_Generic
    | ClassOrInterface of type_Generic
    | Interface of type_InterfaceType
    | Object of type_ObjectType
    | Enum of type_Generic
    | TypeParameter of type_TypeParameter
    | Tuple of type_TupleType
    | Intersection of type_IntersectionType
    | UnionOrIntersection of type_UnionOrIntersectionType
    | Unknown of type_Generic
    | Null of type_Generic
    | Undefined of type_Generic
    | Never of type_Generic
    | TypeReference of type_TypeReference
    | Anonymous of type_AnonymousType
    | Unidentified of type_Unidentified
] <json adapter.ocaml="Typescript_json_adapters.KindName">
