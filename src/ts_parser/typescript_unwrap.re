module Ts = Typescript_t;

external toGeneric: 'a => Ts.node_Generic = "%identity";

let unwrap_Node = (node: Ts.node): Ts.node_Generic =>
  switch (node) {
  | `SourceFile(inner) => inner |> toGeneric
  | `TypeAliasDeclaration(inner) => inner |> toGeneric
  | `TypeParameter(inner) => inner |> toGeneric
  | `InterfaceDeclaration(inner) => inner |> toGeneric
  | `HeritageClause(inner) => inner |> toGeneric
  | `Identifier(inner) => inner |> toGeneric
  | `PrivateIdentifier(inner) => inner |> toGeneric
  | `StringLiteral(inner) => inner |> toGeneric
  | `NumericLiteral(inner) => inner |> toGeneric
  | `Unknown(inner) => inner |> toGeneric
  | `EndOfFileToken(inner) => inner |> toGeneric
  | `SingleLineCommentTrivia(inner) => inner |> toGeneric
  | `MultiLineCommentTrivia(inner) => inner |> toGeneric
  | `NewLineTrivia(inner) => inner |> toGeneric
  | `WhitespaceTrivia(inner) => inner |> toGeneric
  | `ShebangTrivia(inner) => inner |> toGeneric
  | `ConflictMarkerTrivia(inner) => inner |> toGeneric
  | `BigIntLiteral(inner) => inner |> toGeneric
  | `JsxText(inner) => inner |> toGeneric
  | `JsxTextAllWhiteSpaces(inner) => inner |> toGeneric
  | `RegularExpressionLiteral(inner) => inner |> toGeneric
  | `NoSubstitutionTemplateLiteral(inner) => inner |> toGeneric
  | `TemplateHead(inner) => inner |> toGeneric
  | `TemplateMiddle(inner) => inner |> toGeneric
  | `TemplateTail(inner) => inner |> toGeneric
  | `OpenBraceToken(inner) => inner |> toGeneric
  | `CloseBraceToken(inner) => inner |> toGeneric
  | `OpenParenToken(inner) => inner |> toGeneric
  | `CloseParenToken(inner) => inner |> toGeneric
  | `OpenBracketToken(inner) => inner |> toGeneric
  | `CloseBracketToken(inner) => inner |> toGeneric
  | `DotToken(inner) => inner |> toGeneric
  | `DotDotDotToken(inner) => inner |> toGeneric
  | `SemicolonToken(inner) => inner |> toGeneric
  | `CommaToken(inner) => inner |> toGeneric
  | `QuestionDotToken(inner) => inner |> toGeneric
  | `LessThanToken(inner) => inner |> toGeneric
  | `LessThanSlashToken(inner) => inner |> toGeneric
  | `GreaterThanToken(inner) => inner |> toGeneric
  | `LessThanEqualsToken(inner) => inner |> toGeneric
  | `GreaterThanEqualsToken(inner) => inner |> toGeneric
  | `EqualsEqualsToken(inner) => inner |> toGeneric
  | `ExclamationEqualsToken(inner) => inner |> toGeneric
  | `EqualsEqualsEqualsToken(inner) => inner |> toGeneric
  | `ExclamationEqualsEqualsToken(inner) => inner |> toGeneric
  | `EqualsGreaterThanToken(inner) => inner |> toGeneric
  | `PlusToken(inner) => inner |> toGeneric
  | `MinusToken(inner) => inner |> toGeneric
  | `AsteriskToken(inner) => inner |> toGeneric
  | `AsteriskAsteriskToken(inner) => inner |> toGeneric
  | `SlashToken(inner) => inner |> toGeneric
  | `PercentToken(inner) => inner |> toGeneric
  | `PlusPlusToken(inner) => inner |> toGeneric
  | `MinusMinusToken(inner) => inner |> toGeneric
  | `LessThanLessThanToken(inner) => inner |> toGeneric
  | `GreaterThanGreaterThanToken(inner) => inner |> toGeneric
  | `GreaterThanGreaterThanGreaterThanToken(inner) => inner |> toGeneric
  | `AmpersandToken(inner) => inner |> toGeneric
  | `BarToken(inner) => inner |> toGeneric
  | `CaretToken(inner) => inner |> toGeneric
  | `ExclamationToken(inner) => inner |> toGeneric
  | `TildeToken(inner) => inner |> toGeneric
  | `AmpersandAmpersandToken(inner) => inner |> toGeneric
  | `BarBarToken(inner) => inner |> toGeneric
  | `QuestionToken(inner) => inner |> toGeneric
  | `ColonToken(inner) => inner |> toGeneric
  | `AtToken(inner) => inner |> toGeneric
  | `QuestionQuestionToken(inner) => inner |> toGeneric
  | `BacktickToken(inner) => inner |> toGeneric
  | `EqualsToken(inner) => inner |> toGeneric
  | `PlusEqualsToken(inner) => inner |> toGeneric
  | `MinusEqualsToken(inner) => inner |> toGeneric
  | `AsteriskEqualsToken(inner) => inner |> toGeneric
  | `AsteriskAsteriskEqualsToken(inner) => inner |> toGeneric
  | `SlashEqualsToken(inner) => inner |> toGeneric
  | `PercentEqualsToken(inner) => inner |> toGeneric
  | `LessThanLessThanEqualsToken(inner) => inner |> toGeneric
  | `GreaterThanGreaterThanEqualsToken(inner) => inner |> toGeneric
  | `GreaterThanGreaterThanGreaterThanEqualsToken(inner) => inner |> toGeneric
  | `AmpersandEqualsToken(inner) => inner |> toGeneric
  | `BarEqualsToken(inner) => inner |> toGeneric
  | `BarBarEqualsToken(inner) => inner |> toGeneric
  | `AmpersandAmpersandEqualsToken(inner) => inner |> toGeneric
  | `QuestionQuestionEqualsToken(inner) => inner |> toGeneric
  | `CaretEqualsToken(inner) => inner |> toGeneric
  | `BreakKeyword(inner) => inner |> toGeneric
  | `CaseKeyword(inner) => inner |> toGeneric
  | `CatchKeyword(inner) => inner |> toGeneric
  | `ClassKeyword(inner) => inner |> toGeneric
  | `ConstKeyword(inner) => inner |> toGeneric
  | `ContinueKeyword(inner) => inner |> toGeneric
  | `DebuggerKeyword(inner) => inner |> toGeneric
  | `DefaultKeyword(inner) => inner |> toGeneric
  | `DeleteKeyword(inner) => inner |> toGeneric
  | `DoKeyword(inner) => inner |> toGeneric
  | `ElseKeyword(inner) => inner |> toGeneric
  | `EnumKeyword(inner) => inner |> toGeneric
  | `ExportKeyword(inner) => inner |> toGeneric
  | `ExtendsKeyword(inner) => inner |> toGeneric
  | `FalseKeyword(inner) => inner |> toGeneric
  | `FinallyKeyword(inner) => inner |> toGeneric
  | `ForKeyword(inner) => inner |> toGeneric
  | `FunctionKeyword(inner) => inner |> toGeneric
  | `IfKeyword(inner) => inner |> toGeneric
  | `ImportKeyword(inner) => inner |> toGeneric
  | `InKeyword(inner) => inner |> toGeneric
  | `InstanceOfKeyword(inner) => inner |> toGeneric
  | `NewKeyword(inner) => inner |> toGeneric
  | `NullKeyword(inner) => inner |> toGeneric
  | `ReturnKeyword(inner) => inner |> toGeneric
  | `SuperKeyword(inner) => inner |> toGeneric
  | `SwitchKeyword(inner) => inner |> toGeneric
  | `ThisKeyword(inner) => inner |> toGeneric
  | `ThrowKeyword(inner) => inner |> toGeneric
  | `TrueKeyword(inner) => inner |> toGeneric
  | `TryKeyword(inner) => inner |> toGeneric
  | `TypeOfKeyword(inner) => inner |> toGeneric
  | `VarKeyword(inner) => inner |> toGeneric
  | `VoidKeyword(inner) => inner |> toGeneric
  | `WhileKeyword(inner) => inner |> toGeneric
  | `WithKeyword(inner) => inner |> toGeneric
  | `ImplementsKeyword(inner) => inner |> toGeneric
  | `InterfaceKeyword(inner) => inner |> toGeneric
  | `LetKeyword(inner) => inner |> toGeneric
  | `PackageKeyword(inner) => inner |> toGeneric
  | `PrivateKeyword(inner) => inner |> toGeneric
  | `ProtectedKeyword(inner) => inner |> toGeneric
  | `PublicKeyword(inner) => inner |> toGeneric
  | `StaticKeyword(inner) => inner |> toGeneric
  | `YieldKeyword(inner) => inner |> toGeneric
  | `AbstractKeyword(inner) => inner |> toGeneric
  | `AsKeyword(inner) => inner |> toGeneric
  | `AssertsKeyword(inner) => inner |> toGeneric
  | `AnyKeyword(inner) => inner |> toGeneric
  | `AsyncKeyword(inner) => inner |> toGeneric
  | `AwaitKeyword(inner) => inner |> toGeneric
  | `BooleanKeyword(inner) => inner |> toGeneric
  | `ConstructorKeyword(inner) => inner |> toGeneric
  | `DeclareKeyword(inner) => inner |> toGeneric
  | `GetKeyword(inner) => inner |> toGeneric
  | `InferKeyword(inner) => inner |> toGeneric
  | `IsKeyword(inner) => inner |> toGeneric
  | `KeyOfKeyword(inner) => inner |> toGeneric
  | `ModuleKeyword(inner) => inner |> toGeneric
  | `NamespaceKeyword(inner) => inner |> toGeneric
  | `NeverKeyword(inner) => inner |> toGeneric
  | `ReadonlyKeyword(inner) => inner |> toGeneric
  | `RequireKeyword(inner) => inner |> toGeneric
  | `NumberKeyword(inner) => inner |> toGeneric
  | `ObjectKeyword(inner) => inner |> toGeneric
  | `SetKeyword(inner) => inner |> toGeneric
  | `StringKeyword(inner) => inner |> toGeneric
  | `SymbolKeyword(inner) => inner |> toGeneric
  | `TypeKeyword(inner) => inner |> toGeneric
  | `UndefinedKeyword(inner) => inner |> toGeneric
  | `UniqueKeyword(inner) => inner |> toGeneric
  | `UnknownKeyword(inner) => inner |> toGeneric
  | `FromKeyword(inner) => inner |> toGeneric
  | `GlobalKeyword(inner) => inner |> toGeneric
  | `BigIntKeyword(inner) => inner |> toGeneric
  | `OfKeyword(inner) => inner |> toGeneric
  | `QualifiedName(inner) => inner |> toGeneric
  | `ComputedPropertyName(inner) => inner |> toGeneric
  | `Parameter(inner) => inner |> toGeneric
  | `Decorator(inner) => inner |> toGeneric
  | `PropertySignature(inner) => inner |> toGeneric
  | `PropertyDeclaration(inner) => inner |> toGeneric
  | `MethodSignature(inner) => inner |> toGeneric
  | `MethodDeclaration(inner) => inner |> toGeneric
  | `Constructor(inner) => inner |> toGeneric
  | `GetAccessor(inner) => inner |> toGeneric
  | `SetAccessor(inner) => inner |> toGeneric
  | `CallSignature(inner) => inner |> toGeneric
  | `ConstructSignature(inner) => inner |> toGeneric
  | `IndexSignature(inner) => inner |> toGeneric
  | `TypePredicate(inner) => inner |> toGeneric
  | `TypeReference(inner) => inner |> toGeneric
  | `FunctionType(inner) => inner |> toGeneric
  | `ConstructorType(inner) => inner |> toGeneric
  | `TypeQuery(inner) => inner |> toGeneric
  | `TypeLiteral(inner) => inner |> toGeneric
  | `ArrayType(inner) => inner |> toGeneric
  | `TupleType(inner) => inner |> toGeneric
  | `OptionalType(inner) => inner |> toGeneric
  | `RestType(inner) => inner |> toGeneric
  | `UnionType(inner) => inner |> toGeneric
  | `IntersectionType(inner) => inner |> toGeneric
  | `ConditionalType(inner) => inner |> toGeneric
  | `InferType(inner) => inner |> toGeneric
  | `ParenthesizedType(inner) => inner |> toGeneric
  | `ThisType(inner) => inner |> toGeneric
  | `TypeOperator(inner) => inner |> toGeneric
  | `IndexedAccessType(inner) => inner |> toGeneric
  | `MappedType(inner) => inner |> toGeneric
  | `LiteralType(inner) => inner |> toGeneric
  | `NamedTupleMember(inner) => inner |> toGeneric
  | `ImportType(inner) => inner |> toGeneric
  | `ObjectBindingPattern(inner) => inner |> toGeneric
  | `ArrayBindingPattern(inner) => inner |> toGeneric
  | `BindingElement(inner) => inner |> toGeneric
  | `ArrayLiteralExpression(inner) => inner |> toGeneric
  | `ObjectLiteralExpression(inner) => inner |> toGeneric
  | `PropertyAccessExpression(inner) => inner |> toGeneric
  | `ElementAccessExpression(inner) => inner |> toGeneric
  | `CallExpression(inner) => inner |> toGeneric
  | `NewExpression(inner) => inner |> toGeneric
  | `TaggedTemplateExpression(inner) => inner |> toGeneric
  | `TypeAssertionExpression(inner) => inner |> toGeneric
  | `ParenthesizedExpression(inner) => inner |> toGeneric
  | `FunctionExpression(inner) => inner |> toGeneric
  | `ArrowFunction(inner) => inner |> toGeneric
  | `DeleteExpression(inner) => inner |> toGeneric
  | `TypeOfExpression(inner) => inner |> toGeneric
  | `VoidExpression(inner) => inner |> toGeneric
  | `AwaitExpression(inner) => inner |> toGeneric
  | `PrefixUnaryExpression(inner) => inner |> toGeneric
  | `PostfixUnaryExpression(inner) => inner |> toGeneric
  | `BinaryExpression(inner) => inner |> toGeneric
  | `ConditionalExpression(inner) => inner |> toGeneric
  | `TemplateExpression(inner) => inner |> toGeneric
  | `YieldExpression(inner) => inner |> toGeneric
  | `SpreadElement(inner) => inner |> toGeneric
  | `ClassExpression(inner) => inner |> toGeneric
  | `OmittedExpression(inner) => inner |> toGeneric
  | `ExpressionWithTypeArguments(inner) => inner |> toGeneric
  | `AsExpression(inner) => inner |> toGeneric
  | `NonNullExpression(inner) => inner |> toGeneric
  | `MetaProperty(inner) => inner |> toGeneric
  | `SyntheticExpression(inner) => inner |> toGeneric
  | `TemplateSpan(inner) => inner |> toGeneric
  | `SemicolonClassElement(inner) => inner |> toGeneric
  | `Block(inner) => inner |> toGeneric
  | `EmptyStatement(inner) => inner |> toGeneric
  | `VariableStatement(inner) => inner |> toGeneric
  | `ExpressionStatement(inner) => inner |> toGeneric
  | `IfStatement(inner) => inner |> toGeneric
  | `DoStatement(inner) => inner |> toGeneric
  | `WhileStatement(inner) => inner |> toGeneric
  | `ForStatement(inner) => inner |> toGeneric
  | `ForInStatement(inner) => inner |> toGeneric
  | `ForOfStatement(inner) => inner |> toGeneric
  | `ContinueStatement(inner) => inner |> toGeneric
  | `BreakStatement(inner) => inner |> toGeneric
  | `ReturnStatement(inner) => inner |> toGeneric
  | `WithStatement(inner) => inner |> toGeneric
  | `SwitchStatement(inner) => inner |> toGeneric
  | `LabeledStatement(inner) => inner |> toGeneric
  | `ThrowStatement(inner) => inner |> toGeneric
  | `TryStatement(inner) => inner |> toGeneric
  | `DebuggerStatement(inner) => inner |> toGeneric
  | `VariableDeclaration(inner) => inner |> toGeneric
  | `VariableDeclarationList(inner) => inner |> toGeneric
  | `FunctionDeclaration(inner) => inner |> toGeneric
  | `ClassDeclaration(inner) => inner |> toGeneric
  | `EnumDeclaration(inner) => inner |> toGeneric
  | `ModuleDeclaration(inner) => inner |> toGeneric
  | `ModuleBlock(inner) => inner |> toGeneric
  | `CaseBlock(inner) => inner |> toGeneric
  | `NamespaceExportDeclaration(inner) => inner |> toGeneric
  | `ImportEqualsDeclaration(inner) => inner |> toGeneric
  | `ImportDeclaration(inner) => inner |> toGeneric
  | `ImportClause(inner) => inner |> toGeneric
  | `NamespaceImport(inner) => inner |> toGeneric
  | `NamedImports(inner) => inner |> toGeneric
  | `ImportSpecifier(inner) => inner |> toGeneric
  | `ExportAssignment(inner) => inner |> toGeneric
  | `ExportDeclaration(inner) => inner |> toGeneric
  | `NamedExports(inner) => inner |> toGeneric
  | `NamespaceExport(inner) => inner |> toGeneric
  | `ExportSpecifier(inner) => inner |> toGeneric
  | `MissingDeclaration(inner) => inner |> toGeneric
  | `ExternalModuleReference(inner) => inner |> toGeneric
  | `JsxElement(inner) => inner |> toGeneric
  | `JsxSelfClosingElement(inner) => inner |> toGeneric
  | `JsxOpeningElement(inner) => inner |> toGeneric
  | `JsxClosingElement(inner) => inner |> toGeneric
  | `JsxFragment(inner) => inner |> toGeneric
  | `JsxOpeningFragment(inner) => inner |> toGeneric
  | `JsxClosingFragment(inner) => inner |> toGeneric
  | `JsxAttribute(inner) => inner |> toGeneric
  | `JsxAttributes(inner) => inner |> toGeneric
  | `JsxSpreadAttribute(inner) => inner |> toGeneric
  | `JsxExpression(inner) => inner |> toGeneric
  | `CaseClause(inner) => inner |> toGeneric
  | `DefaultClause(inner) => inner |> toGeneric
  | `CatchClause(inner) => inner |> toGeneric
  | `PropertyAssignment(inner) => inner |> toGeneric
  | `ShorthandPropertyAssignment(inner) => inner |> toGeneric
  | `SpreadAssignment(inner) => inner |> toGeneric
  | `EnumMember(inner) => inner |> toGeneric
  | `UnparsedPrologue(inner) => inner |> toGeneric
  | `UnparsedPrepend(inner) => inner |> toGeneric
  | `UnparsedText(inner) => inner |> toGeneric
  | `UnparsedInternalText(inner) => inner |> toGeneric
  | `UnparsedSyntheticReference(inner) => inner |> toGeneric
  | `Bundle(inner) => inner |> toGeneric
  | `UnparsedSource(inner) => inner |> toGeneric
  | `InputFiles(inner) => inner |> toGeneric
  | `JSDocTypeExpression(inner) => inner |> toGeneric
  | `JSDocAllType(inner) => inner |> toGeneric
  | `JSDocUnknownType(inner) => inner |> toGeneric
  | `JSDocNullableType(inner) => inner |> toGeneric
  | `JSDocNonNullableType(inner) => inner |> toGeneric
  | `JSDocOptionalType(inner) => inner |> toGeneric
  | `JSDocFunctionType(inner) => inner |> toGeneric
  | `JSDocVariadicType(inner) => inner |> toGeneric
  | `JSDocNamepathType(inner) => inner |> toGeneric
  | `JSDocComment(inner) => inner |> toGeneric
  | `JSDocTypeLiteral(inner) => inner |> toGeneric
  | `JSDocSignature(inner) => inner |> toGeneric
  | `JSDocTag(inner) => inner |> toGeneric
  | `JSDocAugmentsTag(inner) => inner |> toGeneric
  | `JSDocImplementsTag(inner) => inner |> toGeneric
  | `JSDocAuthorTag(inner) => inner |> toGeneric
  | `JSDocDeprecatedTag(inner) => inner |> toGeneric
  | `JSDocClassTag(inner) => inner |> toGeneric
  | `JSDocPublicTag(inner) => inner |> toGeneric
  | `JSDocPrivateTag(inner) => inner |> toGeneric
  | `JSDocProtectedTag(inner) => inner |> toGeneric
  | `JSDocReadonlyTag(inner) => inner |> toGeneric
  | `JSDocCallbackTag(inner) => inner |> toGeneric
  | `JSDocEnumTag(inner) => inner |> toGeneric
  | `JSDocParameterTag(inner) => inner |> toGeneric
  | `JSDocReturnTag(inner) => inner |> toGeneric
  | `JSDocThisTag(inner) => inner |> toGeneric
  | `JSDocTypeTag(inner) => inner |> toGeneric
  | `JSDocTemplateTag(inner) => inner |> toGeneric
  | `JSDocTypedefTag(inner) => inner |> toGeneric
  | `JSDocPropertyTag(inner) => inner |> toGeneric
  | `SyntaxList(inner) => inner |> toGeneric
  | `NotEmittedStatement(inner) => inner |> toGeneric
  | `PartiallyEmittedExpression(inner) => inner |> toGeneric
  | `CommaListExpression(inner) => inner |> toGeneric
  | `MergeDeclarationMarker(inner) => inner |> toGeneric
  | `EndOfDeclarationMarker(inner) => inner |> toGeneric
  | `SyntheticReferenceExpression(inner) => inner |> toGeneric
  | `Count(inner) => inner |> toGeneric
  };

external toGeneric: 'a => Ts.type_Generic = "%identity";

let unwrap_Type = (type_: Typescript_t.type_): Typescript_t.type_Generic =>
  switch (type_) {
  | `Any(inner) => inner |> toGeneric
  | `Void(inner) => inner |> toGeneric
  | `ObjectKeyword(inner) => inner |> toGeneric
  | `Array(inner) => inner |> toGeneric
  | `Boolean(inner) => inner |> toGeneric
  | `String(inner) => inner |> toGeneric
  | `Number(inner) => inner |> toGeneric
  | `Literal(inner) => inner |> toGeneric
  | `BooleanLiteral(inner) => inner |> toGeneric
  | `Union(inner) => inner |> toGeneric
  | `EnumLiteral(inner) => inner |> toGeneric
  | `NumberLiteral(inner) => inner |> toGeneric
  | `StringLiteral(inner) => inner |> toGeneric
  | `Class(inner) => inner |> toGeneric
  | `ClassOrInterface(inner) => inner |> toGeneric
  | `Interface(inner) => inner |> toGeneric
  | `Object(inner) => inner |> toGeneric
  | `Enum(inner) => inner |> toGeneric
  | `TypeParameter(inner) => inner |> toGeneric
  | `Tuple(inner) => inner |> toGeneric
  | `Intersection(inner) => inner |> toGeneric
  | `UnionOrIntersection(inner) => inner |> toGeneric
  | `Unknown(inner) => inner |> toGeneric
  | `Null(inner) => inner |> toGeneric
  | `Undefined(inner) => inner |> toGeneric
  | `TypeReference(inner) => inner |> toGeneric
  | `Anonymous(inner) => inner |> toGeneric
  | `Unidentified(inner) => inner |> toGeneric
  };

let unwrap_Name = (node: Ts.node) => {
  let name =
    switch (node) {
    | `MethodSignature({name, _})
    | `FunctionDeclaration({name, _}) => name

    | `TypeParameter({name, _})
    | `VariableDeclaration({name, _})
    | `TypeAliasDeclaration({name, _})
    | `PropertySignature({name, _})
    | `EnumDeclaration({name, _})
    | `PropertyDeclaration({name, _})
    | `Parameter({name, _})
    | `EnumMember({name, _})
    | `BindingElement({name, _})
    | `InterfaceDeclaration({name, _}) => Some(name)
    | _ => None
    };
  name
  |> CCOpt.flat_map(node =>
       switch (node) {
       | `Identifier(({escapedText, _}: Ts.node_Identifier)) =>
         Some(escapedText)
       | _ => None
       }
     );
};
